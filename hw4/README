/**********************************************************
* Project 2: CalcYouLater
* CS 15 
* README
  Arbert Xu(axu10)
*
*********************************************************/

Compile/run:
     - Compile using
            make CalcYouLater
     - run executable with
            ./CalcYouLater


Program Purpose: To operate a RPN Calculator which can take in user input 
along with files with input. It can also take in booleans and strings of 
commands.


Acknowledgements: N/A


Files: 

main.cpp:
      Handles simple functions like creating the RPNCalculator and starting it

RPNCalc.h
    Interface of RPNCalc class

RPNCalc.cpp
    Creates a DatumStack and function for the RPNCalculator. Can add different 
    Datums, do math operations, read in files with commands, and read in 
    strings of commands.

unit_test.h
    Tests functions of DatumStack to ensure stack works in way intended.

testParser.txt
    test to see if parser function would be able to correctly parse a RString
    of just numbers on multiple lines and with some spaces. Also tests to see
    if reading is correct with multiple {}.

TestParser2.txt
    Tests to see if parser function could correctly read a RString with words
    inside of it.

test-divide_0.txt 
    a file to be input the RPNCalculator to see if appropriate errors for 
    dividing and mod by 0 are cerr.

test_errors.txt
    A file to test if errors are correctly thrown and printed out to the 
    RPNCalculator.

setup
    file given to copy over files for the HW

parser.h
    Interface for the parser.cpp function

parser.cpp
    Function parseRString which will read in a RString and return it as a
    string. Will see if RSTring has correct number of {}.

n_fibs.cylc
    text file that will take the top int Datum off the stack and print out 
    fibonnaci numbers 0 to N, consuming N.
n_fibs.cyl
    the text file but with comments inside to explain what is going on

mini_fact.cylc
    the beggining part of the factorial function 

mini_fact.cyl
    same thing

got_int.cpp
    function provided to see if given string input is an int.

fib.cylc 
    Assumes a non-negative integer N is on the top of the stack.
    Consumes N and leaves fibonacci (N) in its place on the top of the stack. 

fib.cyl 
    Same thing but with comments

fib_debug.cyl
    file to help with debugging print statements

fact.cyl 
    fact.cylc with comments to explain it
fact.clyc
    Assumes a non-negative integer N is on the top of the stack.
    Consumes N and leaves N! in its place on the top of the stack.

DatumStack.h
    Interface for the DatumStack class

DatumStack.cpp
    Creates a list that will act like a stack. Initializes functions that 
    will allow the list to act as a stack. Able to pop and push items to the 
    front. Can clear, see the size, and get the top element.

Datum+vector_example.cpp
    given file that helps explain how Datum functions work.

Datum.h
    Interface for the Datum class.

cylc
    takes a cyl file and removes all comments and blank spaces to allow it to 
    to be used as a file in the RPNCalc.

add.cylc
    Simple addition statements and print statements

add.cyl
    Same but with comments

Architectural Overview: Main creates and runs the RPNCalculator. The 
RPNCalculator stores Datums inside of a DatumStack, which functions as a stack.
The RPNCalculator uses function from the DatumStack class, Datum class, and 
parser.cpp in order to function. Datum are kept inside of the DatumStack and 
the RPNCalculator stores inputs into the DatumStack to allow different 
functions to be done on them.

Data Structures: Used a stack to implement the RPNCalculator. Using a stack was
the choice because the a stack is first in last out. Thus, the last integer we 
put in will be the integer acted upon if we say want to use +. This makes it so
the RPNCalculator can function as in Reverse Polish Notation. To implement the 
stack, I used a list because it is more efficient to add and remove from the 
front of a list rather than a vector, because a vector needs to adjust the 
rest of its components while a list just needs to change some pointers. Other
situations in which a stack could be used is when implementing a undo button as 
the last doen action is at the top of the stack so it can be the first one off. 
A stack could also be used to store message logs, where the last sent message
is the first on the stack. This makes it easy to undo or find recent messages.
Some algorithms of interest are the file function, which reads in a file in a 
RString and does all the operations inside of the file. I made it so the file
is read into the query loop which made the implementation much easier. Another 
function that was quite interesting was the if function as it required a lot 
of pre-requisets to function so checking for all of them was interesting.

Testing: For DatumStack, I used unit tests to test my functions. For testing 
parser, I created two files, testParser and testParser2, to see if the files
were parsed correctly. TestParser contained some special cases like multiple {}
and spaces and new lines. When testing RPNCalculator, I used the given add,
fact, and fib files to test out many of the functions. During the building, I
would run CalcYouLater and see if specific functions like print, swap, dup, etc
were working. I created a file test_errors to test if errors were correctly 
thrown. I also created a test-divide_0 file to see if the error for dividing 
by zero was thrown.


Time Spent: 8 hours

